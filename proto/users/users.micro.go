// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/users/users.proto

package user

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for UsersService service

type UsersService interface {
	CreateUser(ctx context.Context, in *User, opts ...client.CallOption) (*Response, error)
	UpdateUser(ctx context.Context, in *User, opts ...client.CallOption) (*Response, error)
	DeleteUser(ctx context.Context, in *User, opts ...client.CallOption) (*Response, error)
	GetUserByPersonID(ctx context.Context, in *User, opts ...client.CallOption) (*Response, error)
	GetUserByPersonIDAndPassword(ctx context.Context, in *User, opts ...client.CallOption) (*Response, error)
}

type usersService struct {
	c    client.Client
	name string
}

func NewUsersService(name string, c client.Client) UsersService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "user"
	}
	return &usersService{
		c:    c,
		name: name,
	}
}

func (c *usersService) CreateUser(ctx context.Context, in *User, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "UsersService.CreateUser", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersService) UpdateUser(ctx context.Context, in *User, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "UsersService.UpdateUser", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersService) DeleteUser(ctx context.Context, in *User, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "UsersService.DeleteUser", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersService) GetUserByPersonID(ctx context.Context, in *User, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "UsersService.GetUserByPersonID", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersService) GetUserByPersonIDAndPassword(ctx context.Context, in *User, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "UsersService.GetUserByPersonIDAndPassword", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UsersService service

type UsersServiceHandler interface {
	CreateUser(context.Context, *User, *Response) error
	UpdateUser(context.Context, *User, *Response) error
	DeleteUser(context.Context, *User, *Response) error
	GetUserByPersonID(context.Context, *User, *Response) error
	GetUserByPersonIDAndPassword(context.Context, *User, *Response) error
}

func RegisterUsersServiceHandler(s server.Server, hdlr UsersServiceHandler, opts ...server.HandlerOption) error {
	type usersService interface {
		CreateUser(ctx context.Context, in *User, out *Response) error
		UpdateUser(ctx context.Context, in *User, out *Response) error
		DeleteUser(ctx context.Context, in *User, out *Response) error
		GetUserByPersonID(ctx context.Context, in *User, out *Response) error
		GetUserByPersonIDAndPassword(ctx context.Context, in *User, out *Response) error
	}
	type UsersService struct {
		usersService
	}
	h := &usersServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&UsersService{h}, opts...))
}

type usersServiceHandler struct {
	UsersServiceHandler
}

func (h *usersServiceHandler) CreateUser(ctx context.Context, in *User, out *Response) error {
	return h.UsersServiceHandler.CreateUser(ctx, in, out)
}

func (h *usersServiceHandler) UpdateUser(ctx context.Context, in *User, out *Response) error {
	return h.UsersServiceHandler.UpdateUser(ctx, in, out)
}

func (h *usersServiceHandler) DeleteUser(ctx context.Context, in *User, out *Response) error {
	return h.UsersServiceHandler.DeleteUser(ctx, in, out)
}

func (h *usersServiceHandler) GetUserByPersonID(ctx context.Context, in *User, out *Response) error {
	return h.UsersServiceHandler.GetUserByPersonID(ctx, in, out)
}

func (h *usersServiceHandler) GetUserByPersonIDAndPassword(ctx context.Context, in *User, out *Response) error {
	return h.UsersServiceHandler.GetUserByPersonIDAndPassword(ctx, in, out)
}
